-module(egpx).

%% egpx: egpx library's entry point.

-export([read_file/1, event_func/3]).


-record(gpx, {metadata, trks}).

-record(trk, {name, trksegs}).

-record(trkseg, {trkpts}).

-record(trkpt, {lat, lon, elev, time}).

-record(state, {gpx, nest}).

%% API

%% @doc Use the built in SAX parser to scan the GPX file.
read_file(GpxFile) ->
    InitState = #state{gpx = #gpx{}, nest = []},
    Options = [{event_fun, fun event_func/3}, {event_state, InitState}],
    xmerl_sax_parser:file(GpxFile, Options).

%% @doc Callback to use as an EventFun.
event_func(Event, Location, State) ->
    io:format("Ev: ~p Loc: ~p St: ~p~n", [Event, Location, State]),
    handle_event(Event, Location, State).

%% @doc Handle the events generated by the XML parser. The nest parameter is 
%% a list which gets longer with each level of nesting, allowing the 
%% hierarchy to be pattern matched.
handle_event({characters, Str}, _, #state{nest = [ele|_]} = State) ->
    {Elevation, []} = string:to_float(Str),
    io:format("Elevation ~p~n", [Elevation]),
    State;
handle_event({characters, Str}, _, #state{nest = [time|_]} = State) ->
    io:format("Time string ~p~n", [Str]),
    State;
handle_event({startElement, _, "trkpt" = LocalName, _, Attr}, _, State) ->
    io:format("Start element ~p detected, attr ~p~n", [LocalName, Attr]),
    {Lat, Lon} = attributes_to_lat_lon(Attr), 
    io:format("Lat ~p, Lon ~p~n", [Lat, Lon]),
    add_nest(State, LocalName);
handle_event({startElement, _, LocalName, _, _}, _, #state{nest = Nest} = State) ->
    io:format("Start element ~p detected~n", [LocalName]),
    add_nest(State, LocalName);
handle_event({endElement, _, LocalName, _}, _, State) ->
    io:format("End element ~p detected~n", [LocalName]),
    reduce_nest(State);
handle_event(_, _, State) -> State.

%% @doc Deepen the nesting level in the state variable.
add_nest(State, LocalName) ->
    #state{nest = Nest} = State,
    NewNest = [tag_to_atom(LocalName)|Nest],
    State#state{nest = NewNest}.

%% @doc Reduce the nesting by one level.
reduce_nest(#state{nest = Nest} = State) ->
    [_|NewNest] = Nest,
    State#state{nest = NewNest}.

%% @doc Map tags to atoms.
tag_to_atom("gpx")        -> gpx;
tag_to_atom("trk")        -> trk;
tag_to_atom("name")       -> name;
tag_to_atom("trkseg")     -> trkseg;
tag_to_atom("trkpt")      -> trkpt;
tag_to_atom("ele")        -> ele;
tag_to_atom("time")       -> time;
tag_to_atom(_)            -> undefined.

%% @doc Extract the Lat, Lon from attributes. Assumes fixed ordering at present.
attributes_to_lat_lon([{_,_,"lat",LatStr},{_,_,"lon",LonStr}|_]) ->
    {NumLat, []} = string:to_float(LatStr),
    {NumLon, []} = string:to_float(LonStr),
    {NumLat, NumLon}.

%% End of Module.
