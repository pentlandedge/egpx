-module(egpx).

%% egpx: egpx library's entry point.

-export([read_file/1, event_func/3]).


-record(gpx, {metadata, trks}).

-record(trk, {name, trksegs}).

-record(trkseg, {trkpts}).

-record(trkpt, {lat, lon, elev, time}).

-record(state, {gpx, nest}).

%% API

%% @doc Use the built in SAX parser to scan the GPX file.
read_file(GpxFile) ->
    InitState = #state{gpx = #gpx{}, nest = []},
    Options = [{event_fun, fun event_func/3}, {event_state, InitState}],
    xmerl_sax_parser:file(GpxFile, Options).

%% @doc Callback to use as an EventFun.
event_func(Event, Location, State) ->
    io:format("Ev: ~p Loc: ~p St: ~p~n", [Event, Location, State]),
    handle_event(Event, Location, State).

%% @doc Handle the events generated by the XML parser.
handle_event({startElement, _, LocalName, _, _}, _, State) ->
    io:format("Start element ~p detected~n", [LocalName]),
    State;
handle_event({endElement, _, LocalName, _}, _, State) ->
    io:format("End element ~p detected~n", [LocalName]),
    State;
handle_event(_, _, State) -> State.

%% End of Module.
